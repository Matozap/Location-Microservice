{
  "Database": {
    "Documentation": {
      "Description": "Database configuration (EF Core)",
      "Usage:DatabaseType": "Possible values are: 'InMemory', 'SQL Server', 'MySql', 'Postgres', 'Cosmos' - (Cosmos EF support is limited)",
      "Usage:InstanceName": "Must match the database or initial catalog set in the connection string",
      "Usage:ConnectionString": "The connection string for the given DatabaseType - Examples matching docker-compose are located in the reference field of appsettings.Development.json"
    },
    "InstanceName": "data",
    "DatabaseType": "<See documentation above>",
    "SeedData": true,    
    "ConnectionString": "<See documentation above>"
  },

  "Cache": {
    "Documentation": {
      "Description": "Cache configuration",
      "Usage:CacheType": "Possible values are: 'InMemory', 'Redis', 'Sql Server'",
      "Usage:HealthCheck": "If enabled, it will disable the cache after <MaxErrorsAllowed> consecutive errors for <ResetIntervalMinutes>",
      "Usage:ConnectionString": "The connection string for the given DatabaseType - Examples matching docker-compose are located in the reference field of appsettings.Development.json"
    },
    "InstanceName": "cache",
    "CacheType": "<See documentation above>",
    "ConnectionString": "<See documentation above>",    
    "HealthCheck": {
      "Enabled": true,
      "MaxErrorsAllowed": 5,
      "ResetIntervalMinutes": 5
    },
    "Disabled": false
  },

  "EventBus": {
    "Documentation": {
      "Description": "Service bus configuration",
      "Usage:BusType": "Possible values are: 'InMemory', 'Azure Service Bus', 'RabbitMQ'",
      "Usage:SendToAdditionalPath": "Use if the messages need to be sent/forwarded to multiple topics'",
      "Usage:Subscriptions": "Should contain it's own subscriptions (used to clear the cache asynchronous) plus subscription to external topics'",
      "Usage:ConnectionString": "The connection string for the given DatabaseType - Examples matching docker-compose are located in the reference field of appsettings.Development.json"
    },
    "BusType": "<See documentation above>",
    "ConnectionString": "<See documentation above>",
    "SendToAdditionalPath": {
      "ExternalTopic" : "",
      "AnotherTopic" : ""
    },
    "Subscriptions": {
      "CountryEvent" : "self.country.location.service",
      "StateEvent" : "self.state.location.service",
      "CityEvent" : "self.city.location.service"
    },
    "Disabled": false
  },

  "Grpc": {    
    "Disabled": false,
    "ReflectionDisabled": false
  },

  "Serilog": {
    "Using": [
      "Serilog.Sinks.ApplicationInsights"
    ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "System": "Error",
        "Microsoft.Hosting.Lifetime": "Warning",
        "Microsoft.EntityFrameworkCore": "Warning",
        "Microsoft.EntityFrameworkCore.Database.Command": "Warning",
        "LocationService": "Information",
        "Microsoft.AspNetCore.Hosting.Diagnostics": "Information",
        "Microsoft.AspNetCore.Mvc.Infrastructure": "Warning",
        "Microsoft.AspNetCore.DataProtection": "Error"
      }
    },
    "WriteTo": [ "Console",
      {
        "Name": "ApplicationInsights",
        "Args": {
          "connectionString": "",
          "telemetryConverter": "Serilog.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights"
        }
      }
    ]
  },

  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "System": "Warning",
      "Microsoft.EntityFrameworkCore": "Warning",
      "Microsoft.AspNetCore.DataProtection": "Error"
    }
  },
  "AllowedHosts": "*"
  
}